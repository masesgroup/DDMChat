# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:

# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - id: get_changed_files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'csv'
      - id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "::set-output name=run_build_windows::true"
                break
              fi
              if [[ $added_modified_file == "src/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "::set-output name=run_build_windows::true"
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: set up msvc env
        uses: ilammy/msvc-dev-cmd@v1.5.0
      
      - name: Build Common Tools
        shell: cmd
        run: |
          cd third_party\CommonTools
          msbuild -p:Configuration=Release,Platform="Any CPU" -m CommonTools.sln

      - name: Extract commit SHA
        run: |
          echo "GITHUB_COMMIT_MESSAGE=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
        shell: bash
       
      - name: Prepare version
        shell: cmd
        run: |
          cd third_party\CommonTools\Output
          VersionGenerator %GITHUB_WORKSPACE%\src\ProductInformation\Version.cs %GITHUB_WORKSPACE%\src\ProductInformation ${{ env.GITHUB_COMMIT_MESSAGE }}
        env:
          GITHUB_WORKSPACE: $GITHUB_WORKSPACE
          
      - name: Prepare packaging versioning
        shell: cmd
        run: |
          third_party\CommonTools\Output\PlaceHolderReplacer.exe .\src\ProductInformation\Version.cs .\src\ChatLib\ChatLibCore.csproj >> .\nuget_version.txt
          third_party\CommonTools\Output\PlaceHolderReplacer.exe .\src\ProductInformation\Version.cs .\src\CommunicationLib\CommunicationLibCore.csproj
          third_party\CommonTools\Output\PlaceHolderReplacer.exe .\src\ProductInformation\Version.cs .\src\ChatUI\ChatUICore.csproj

      - name: Build Chat net4.7.2, net5.0 and netcoreapp3.1
        run: |
          dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" --framework netcoreapp3.1 -o Outputnetcoreapp31 src\ChatCore.sln
          dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" --framework net5.0-windows -o Outputnet50 src\ChatCore.sln
          dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" --framework net472 -o Outputnet472 src\ChatCore.sln
          
      - name: Build Chat solution
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\ChatCore.sln

      - name: Prepare for packaging
        run: |
          Compress-Archive -Path .\Outputnetcoreapp31\* -DestinationPath .\netcoreapp31.zip
          Compress-Archive -Path .\Outputnet50\* -DestinationPath .\net50.zip
          Compress-Archive -Path .\Outputnet472\* -DestinationPath .\net472.zip

      - uses: actions/upload-artifact@v2
        with:
          name: netcoreapp31
          path: .\netcoreapp31.zip

      - uses: actions/upload-artifact@v2
        with:
          name: net50
          path: .\net50.zip

      - uses: actions/upload-artifact@v2
        with:
          name: net472
          path: .\net472.zip

      - uses: actions/upload-artifact@v2
        with:
          name: ChatLib.nupkg
          path: .\src\ChatLib\bin\Release\*nupkg
          
      - uses: actions/upload-artifact@v2
        with:
          name: CommunicationLib.nupkg
          path: .\src\CommunicationLib\bin\Release\*nupkg

